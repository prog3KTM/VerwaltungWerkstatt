/*
 * This file is generated by jOOQ.
 */
package htw.prog3.KTM.generated.tables;


import htw.prog3.KTM.generated.DefaultSchema;
import htw.prog3.KTM.generated.Keys;
import htw.prog3.KTM.generated.tables.records.KundeRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Kunde extends TableImpl<KundeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Kunde</code>
     */
    public static final Kunde KUNDE = new Kunde();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KundeRecord> getRecordType() {
        return KundeRecord.class;
    }

    /**
     * The column <code>Kunde.id</code>.
     */
    public final TableField<KundeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>Kunde.name</code>.
     */
    public final TableField<KundeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Kunde.address</code>.
     */
    public final TableField<KundeRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Kunde.phone</code>.
     */
    public final TableField<KundeRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.CLOB.nullable(false), this, "");

    private Kunde(Name alias, Table<KundeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Kunde(Name alias, Table<KundeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>Kunde</code> table reference
     */
    public Kunde(String alias) {
        this(DSL.name(alias), KUNDE);
    }

    /**
     * Create an aliased <code>Kunde</code> table reference
     */
    public Kunde(Name alias) {
        this(alias, KUNDE);
    }

    /**
     * Create a <code>Kunde</code> table reference
     */
    public Kunde() {
        this(DSL.name("Kunde"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<KundeRecord, Integer> getIdentity() {
        return (Identity<KundeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<KundeRecord> getPrimaryKey() {
        return Keys.KUNDE__PK_KUNDE;
    }

    @Override
    public Kunde as(String alias) {
        return new Kunde(DSL.name(alias), this);
    }

    @Override
    public Kunde as(Name alias) {
        return new Kunde(alias, this);
    }

    @Override
    public Kunde as(Table<?> alias) {
        return new Kunde(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Kunde rename(String name) {
        return new Kunde(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Kunde rename(Name name) {
        return new Kunde(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Kunde rename(Table<?> name) {
        return new Kunde(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Kunde where(Condition condition) {
        return new Kunde(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Kunde where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Kunde where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Kunde where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Kunde where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Kunde where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Kunde where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Kunde where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Kunde whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Kunde whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
